# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cec2020BoundConstrained')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cec2020BoundConstrained')
    _cec2020BoundConstrained = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cec2020BoundConstrained', [dirname(__file__)])
        except ImportError:
            import _cec2020BoundConstrained
            return _cec2020BoundConstrained
        try:
            _mod = imp.load_module('_cec2020BoundConstrained', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cec2020BoundConstrained = swig_import_helper()
    del swig_import_helper
else:
    import _cec2020BoundConstrained
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

INF = _cec2020BoundConstrained.INF
EPS = _cec2020BoundConstrained.EPS
E = _cec2020BoundConstrained.E
PI = _cec2020BoundConstrained.PI

def sphere_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.sphere_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
sphere_func = _cec2020BoundConstrained.sphere_func

def ellips_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.ellips_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
ellips_func = _cec2020BoundConstrained.ellips_func

def bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
bent_cigar_func = _cec2020BoundConstrained.bent_cigar_func

def discus_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.discus_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
discus_func = _cec2020BoundConstrained.discus_func

def dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
dif_powers_func = _cec2020BoundConstrained.dif_powers_func

def rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
rosenbrock_func = _cec2020BoundConstrained.rosenbrock_func

def schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
schaffer_F7_func = _cec2020BoundConstrained.schaffer_F7_func

def ackley_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.ackley_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
ackley_func = _cec2020BoundConstrained.ackley_func

def rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
rastrigin_func = _cec2020BoundConstrained.rastrigin_func

def weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
weierstrass_func = _cec2020BoundConstrained.weierstrass_func

def griewank_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.griewank_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
griewank_func = _cec2020BoundConstrained.griewank_func

def schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
schwefel_func = _cec2020BoundConstrained.schwefel_func

def katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
katsuura_func = _cec2020BoundConstrained.katsuura_func

def bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
bi_rastrigin_func = _cec2020BoundConstrained.bi_rastrigin_func

def grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
grie_rosen_func = _cec2020BoundConstrained.grie_rosen_func

def escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
escaffer6_func = _cec2020BoundConstrained.escaffer6_func

def step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
step_rastrigin_func = _cec2020BoundConstrained.step_rastrigin_func

def happycat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.happycat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
happycat_func = _cec2020BoundConstrained.happycat_func

def hgbat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.hgbat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
hgbat_func = _cec2020BoundConstrained.hgbat_func

def sum_diff_pow_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.sum_diff_pow_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
sum_diff_pow_func = _cec2020BoundConstrained.sum_diff_pow_func

def zakharov_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.zakharov_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
zakharov_func = _cec2020BoundConstrained.zakharov_func

def levy_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.levy_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
levy_func = _cec2020BoundConstrained.levy_func

def dixon_price_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.dixon_price_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
dixon_price_func = _cec2020BoundConstrained.dixon_price_func

def hf01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf01 = _cec2020BoundConstrained.hf01

def hf02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf02 = _cec2020BoundConstrained.hf02

def hf03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf03 = _cec2020BoundConstrained.hf03

def hf04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf04 = _cec2020BoundConstrained.hf04

def hf05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf05 = _cec2020BoundConstrained.hf05

def hf06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf06 = _cec2020BoundConstrained.hf06

def hf07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf07 = _cec2020BoundConstrained.hf07

def hf08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf08 = _cec2020BoundConstrained.hf08

def hf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf09 = _cec2020BoundConstrained.hf09

def hf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.hf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
hf10 = _cec2020BoundConstrained.hf10

def cf01(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf01(arg1, arg2, arg3, arg4, arg5, arg6)
cf01 = _cec2020BoundConstrained.cf01

def cf02(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf02(arg1, arg2, arg3, arg4, arg5, arg6)
cf02 = _cec2020BoundConstrained.cf02

def cf03(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf03(arg1, arg2, arg3, arg4, arg5, arg6)
cf03 = _cec2020BoundConstrained.cf03

def cf04(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf04(arg1, arg2, arg3, arg4, arg5, arg6)
cf04 = _cec2020BoundConstrained.cf04

def cf05(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf05(arg1, arg2, arg3, arg4, arg5, arg6)
cf05 = _cec2020BoundConstrained.cf05

def cf06(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf06(arg1, arg2, arg3, arg4, arg5, arg6)
cf06 = _cec2020BoundConstrained.cf06

def cf07(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf07(arg1, arg2, arg3, arg4, arg5, arg6)
cf07 = _cec2020BoundConstrained.cf07

def cf08(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec2020BoundConstrained.cf08(arg1, arg2, arg3, arg4, arg5, arg6)
cf08 = _cec2020BoundConstrained.cf08

def cf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.cf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
cf09 = _cec2020BoundConstrained.cf09

def cf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec2020BoundConstrained.cf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
cf10 = _cec2020BoundConstrained.cf10

def shiftfunc(arg1, arg2, arg3, arg4):
    return _cec2020BoundConstrained.shiftfunc(arg1, arg2, arg3, arg4)
shiftfunc = _cec2020BoundConstrained.shiftfunc

def rotatefunc(arg1, arg2, arg3, arg4):
    return _cec2020BoundConstrained.rotatefunc(arg1, arg2, arg3, arg4)
rotatefunc = _cec2020BoundConstrained.rotatefunc

def sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
sr_func = _cec2020BoundConstrained.sr_func

def asyfunc(arg1, x, arg3, arg4):
    return _cec2020BoundConstrained.asyfunc(arg1, x, arg3, arg4)
asyfunc = _cec2020BoundConstrained.asyfunc

def oszfunc(arg1, arg2, arg3):
    return _cec2020BoundConstrained.oszfunc(arg1, arg2, arg3)
oszfunc = _cec2020BoundConstrained.oszfunc

def cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec2020BoundConstrained.cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
cf_cal = _cec2020BoundConstrained.cf_cal

def cec20_test_func(arg1, arg2, arg3, arg4, arg5):
    return _cec2020BoundConstrained.cec20_test_func(arg1, arg2, arg3, arg4, arg5)
cec20_test_func = _cec2020BoundConstrained.cec20_test_func
# This file is compatible with both classic and new-style classes.

cvar = _cec2020BoundConstrained.cvar

